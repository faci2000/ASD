Michał Faciszewski


def partition(tab, left, right):
    pivot=median_of_medians(tab[left:(right+1)])
    while left<right:
        while tab[left]<pivot and left<right:
            left+=1
        while tab[right]>=pivot and left<right:
            right-=1
        if left<=right:
            tab[left],tab[right]=tab[right],tab[left]
    return left

def find_median_in_five(Tab,left,right):
    for i in range(3):
        for j in range(left,right-i-1):
            if Tab[j]>Tab[j+1]:
                Tab[j],Tab[j+1]=Tab[j+1],Tab[j]
    return Tab[(left+right)//2]        

def median_of_medians(Tab):
    if len(Tab)==1:
        return Tab[0]
    if len(Tab)%5==0:
        Median_tab=[None for i in range(len(Tab)//5)]
    else:
        Median_tab=[None for i in range(len(Tab)//5+1)]
    for i in range(0,len(Tab),5):
        Median_tab[i//5]=find_median_in_five(Tab,i,min(i+5,len(Tab)-1))
    return median_of_medians(Median_tab)

def quick_select(tab,index_to_find):
    left=0
    right=len(tab)-1
    while(True):
        middle=partition(tab,left,right)
        if(middle<index_to_find):
            left=middle+1
        elif middle>index_to_find:
            right=middle-1
        else:
            return tab[middle]

def section(T,p,q):
    p_val=quick_select(T,p)
    q_val=quick_select(T,q)
    Soliders=[]
    Soliders.append(p_val)
    Soliders.append(q_val)
    for i in range(len(T)):
        if T[i]<q_val and T[i]>p_val:
            Soliders.append(T[i])
    return Soliders

Napisany przeze mnie algorytm, za pomoca algorytmu quickselect znajduje 
wzrost żołnierza na pozycji q-tej, i p-tej. A następnie tworzy tablice, 
do której dodaje elementy p_val,q_val oraza wszystkie należące do przedziału (p,q).
Ogólna złożoność czasowa to O(n).